{"ast":null,"code":"import { __rest, __assign } from './_virtual/_tslib.js';\nimport * as React from 'react';\nimport MuiAutocomplete from '@mui/material/Autocomplete';\nimport invariant from 'tiny-warning';\nfunction fieldToAutocomplete(_a) {\n  var disabled = _a.disabled,\n    field = _a.field,\n    _b = _a.form,\n    isSubmitting = _b.isSubmitting,\n    setFieldValue = _b.setFieldValue;\n  _a.type;\n  var onChange = _a.onChange,\n    onBlur = _a.onBlur,\n    freeSolo = _a.freeSolo,\n    props = __rest(_a, [\"disabled\", \"field\", \"form\", \"type\", \"onChange\", \"onBlur\", \"freeSolo\"]);\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(Array.isArray(field.value), \"value for \" + field.name + \" is not an array, this can caused unexpected behaviour\");\n    }\n  }\n  field.onChange;\n  field.onBlur;\n  field.multiple;\n  var fieldSubselection = __rest(field, [\"onChange\", \"onBlur\", \"multiple\"]);\n  return __assign(__assign({\n    freeSolo: freeSolo,\n    onBlur: onBlur !== null && onBlur !== void 0 ? onBlur : function (event) {\n      field.onBlur(event !== null && event !== void 0 ? event : field.name);\n    },\n    onChange: onChange !== null && onChange !== void 0 ? onChange : function (_event, value) {\n      setFieldValue(field.name, value);\n    },\n    disabled: disabled !== null && disabled !== void 0 ? disabled : isSubmitting,\n    loading: isSubmitting\n  }, fieldSubselection), props);\n}\nfunction Autocomplete(props) {\n  return React.createElement(MuiAutocomplete, __assign({}, fieldToAutocomplete(props)));\n}\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\nexport { Autocomplete, fieldToAutocomplete };","map":{"version":3,"names":["fieldToAutocomplete","_a","disabled","field","_b","form","isSubmitting","setFieldValue","type","onChange","onBlur","freeSolo","props","__rest","process","env","NODE_ENV","multiple","invariant","Array","isArray","value","name","fieldSubselection","__assign","event","_event","loading","Autocomplete","React","createElement","MuiAutocomplete","displayName"],"sources":["/Users/salahhasan/Projects/senior-tech-assess/senior-tech-assess/senior-client/node_modules/formik-material-ui/src/Autocomplete.tsx"],"sourcesContent":["import * as React from 'react';\nimport MuiAutocomplete, {\n  AutocompleteProps as MuiAutocompleteProps,\n} from '@mui/material/Autocomplete';\nimport { FieldProps } from 'formik';\nimport invariant from 'tiny-warning';\n\nexport { AutocompleteRenderInputParams } from '@mui/material/Autocomplete';\n\nexport interface AutocompleteProps<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n> extends FieldProps,\n    Omit<\n      MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo>,\n      'name' | 'value' | 'defaultValue'\n    > {\n  type?: string;\n}\n\nexport function fieldToAutocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>({\n  disabled,\n  field,\n  form: { isSubmitting, setFieldValue },\n  type,\n  onChange,\n  onBlur,\n  freeSolo,\n  ...props\n}: AutocompleteProps<\n  T,\n  Multiple,\n  DisableClearable,\n  FreeSolo\n>): MuiAutocompleteProps<T, Multiple, DisableClearable, FreeSolo> {\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.multiple) {\n      invariant(\n        Array.isArray(field.value),\n        `value for ${field.name} is not an array, this can caused unexpected behaviour`\n      );\n    }\n  }\n\n  const {\n    onChange: _onChange,\n    onBlur: _onBlur,\n    multiple: _multiple,\n    ...fieldSubselection\n  } = field;\n\n  return {\n    freeSolo,\n    onBlur:\n      onBlur ??\n      function (event) {\n        field.onBlur(event ?? field.name);\n      },\n    onChange:\n      onChange ??\n      function (_event, value) {\n        setFieldValue(field.name, value);\n      },\n    disabled: disabled ?? isSubmitting,\n    loading: isSubmitting,\n    ...fieldSubselection,\n    ...props,\n  };\n}\n\nexport function Autocomplete<\n  T,\n  Multiple extends boolean | undefined,\n  DisableClearable extends boolean | undefined,\n  FreeSolo extends boolean | undefined\n>(props: AutocompleteProps<T, Multiple, DisableClearable, FreeSolo>) {\n  return <MuiAutocomplete {...fieldToAutocomplete(props)} />;\n}\n\nAutocomplete.displayName = 'FormikMaterialUIAutocomplete';\n"],"mappings":";;;;SAsBgBA,mBAAmBA,CAKjCC,EAcD;MAbCC,QAAQ,GAAAD,EAAA,CAAAC,QAAA;IACRC,KAAK,GAAAF,EAAA,CAAAE,KAAA;IACLC,EAAA,GAAAH,EAAA,CAAAI,IAAqC;IAA7BC,YAAY,GAAAF,EAAA,CAAAE,YAAA;IAAEC,aAAa,GAAAH,EAAA,CAAAG,aAAA;EAAAN,EAAA,CAAAO,IAC/B;EAAA,IACJC,QAAQ,GAAAR,EAAA,CAAAQ,QAAA;IACRC,MAAM,GAAAT,EAAA,CAAAS,MAAA;IACNC,QAAQ,GAAAV,EAAA,CAAAU,QAAA;IACLC,KAAK,GAAAC,MAAA,CAAAZ,EAAA,EARR,uEASD;EAMC,IAAIa,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzC,IAAIJ,KAAK,CAACK,QAAQ,EAAE;MAClBC,SAAS,CACPC,KAAK,CAACC,OAAO,CAACjB,KAAK,CAACkB,KAAK,CAAC,EAC1B,eAAalB,KAAK,CAACmB,IAAI,2DAAwD,CAChF;;;EASDnB,KAAK,CAAAM,QAJY;EAIjBN,KAAK,CAAAO,MAHQ;EAGbP,KAAK,CAAAc,QAFY;EAAA,IAChBM,iBAAiB,GAAAV,MAAA,CAClBV,KAAK,EALH,kCAKL;EAED,OAAAqB,QAAA,CAAAA,QAAA;IACEb,QAAQ,EAAAA,QAAA;IACRD,MAAM,EACJA,MAAM,aAANA,MAAM,cAANA,MAAM,GACN,UAAUe,KAAK;MACbtB,KAAK,CAACO,MAAM,CAACe,KAAK,aAALA,KAAK,cAALA,KAAK,GAAItB,KAAK,CAACmB,IAAI,CAAC;KAClC;IACHb,QAAQ,EACNA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GACR,UAAUiB,MAAM,EAAEL,KAAK;MACrBd,aAAa,CAACJ,KAAK,CAACmB,IAAI,EAAED,KAAK,CAAC;KACjC;IACHnB,QAAQ,EAAEA,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAII,YAAY;IAClCqB,OAAO,EAAErB;EAAY,GAClBiB,iBAAiB,GACjBX,KAAK;AAEZ;SAEgBgB,YAAYA,CAK1BhB,KAAiE;EACjE,OAAOiB,KAAA,CAAAC,aAAA,CAACC,eAAe,EAAAP,QAAA,KAAKxB,mBAAmB,CAACY,KAAK,CAAC,EAAI;AAC5D;AAEAgB,YAAY,CAACI,WAAW,GAAG,8BAA8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}